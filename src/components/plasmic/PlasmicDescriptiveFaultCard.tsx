
    // @ts-nocheck
    /* eslint-disable */
    /* tslint:disable */
    /* prettier-ignore-start */
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: oAigPHm8VZgjKtAmnNEFkF
    // Component: pd3kCWpyEX
    // plasmic-unformatted
    import * as React from "react";
    
    import * as p from  "@plasmicapp/react-web";
    import {hasVariant, classNames, wrapWithClassName, createPlasmicElementProxy, makeFragment, MultiChoiceArg, SingleBooleanChoiceArg, SingleChoiceArg, pick, omit, useTrigger, StrictProps, deriveRenderOpts, ensureGlobalVariants} from "@plasmicapp/react-web";
    import FaultNameNumber from "..//FaultNameNumber";  // plasmic-import: KcSIlmSgOq/component
import NeedSupportButton from "..//NeedSupportButton";  // plasmic-import: aahZZJy75V/component
import FixedButton from "..//FixedButton";  // plasmic-import: aKm6LjL0cX/component
    
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    import  "./plasmic_olli_support.css"; // plasmic-import: oAigPHm8VZgjKtAmnNEFkF/projectcss
    import  "./PlasmicDescriptiveFaultCard.css" // plasmic-import: pd3kCWpyEX/css
  
    
    

    
    export type PlasmicDescriptiveFaultCard__VariantMembers = {
      
    };
    export type PlasmicDescriptiveFaultCard__VariantsArgs = {};
    type VariantPropType = keyof PlasmicDescriptiveFaultCard__VariantsArgs;
    export const PlasmicDescriptiveFaultCard__VariantProps = new Array<VariantPropType>();
  

    
    export type PlasmicDescriptiveFaultCard__ArgsType = {
    children?: React.ReactNode;
slot?: React.ReactNode;
slot2?: React.ReactNode
  };
    type ArgPropType = keyof PlasmicDescriptiveFaultCard__ArgsType;
    export const PlasmicDescriptiveFaultCard__ArgProps = new Array<ArgPropType>("children","slot","slot2");
  

    export type PlasmicDescriptiveFaultCard__OverridesType = {
    root?: p.Flex<"div">;
faultNameNumber?: p.Flex<typeof FaultNameNumber>;
box?: p.Flex<"div">;
needSupportButton?: p.Flex<typeof NeedSupportButton>;
fixedButton?: p.Flex<typeof FixedButton>;
  };

    
    export interface DefaultDescriptiveFaultCardProps {
      children?: React.ReactNode;
slot?: React.ReactNode;
slot2?: React.ReactNode
      className?: string;
    }
  

    
    function PlasmicDescriptiveFaultCard__RenderFunc(
      props: {
        variants: PlasmicDescriptiveFaultCard__VariantsArgs,
        args: PlasmicDescriptiveFaultCard__ArgsType
        overrides: PlasmicDescriptiveFaultCard__OverridesType
        forNode?: string
      }
    ) {
      const {variants, args, overrides, forNode} = props;

      
      
      return (
        
  <div
    
    data-plasmic-name={"root"}
    data-plasmic-override={overrides.root}
    data-plasmic-root={true}
    data-plasmic-for-node={forNode}
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_oAigPHm8VZgjKtAmnNEFkF", "DescriptiveFaultCard__root__txgWd")}
    
    >
          
  <FaultNameNumber
    
    data-plasmic-name={"faultNameNumber"}
    data-plasmic-override={overrides.faultNameNumber}
    
    
    
    className={classNames("__wab_instance", "DescriptiveFaultCard__faultNameNumber___2RtpE")}
    
    >
          <p.PlasmicSlot
      defaultContents={"Fault Name - Number"}
      value={args.children}
       />
        </FaultNameNumber>
  
<p.PlasmicSlot
      defaultContents={"Basic fault description. This description will continue on and on and on and on until there is no space."}
      value={args.slot}
       />
<p.PlasmicSlot
      defaultContents={"Advanced fault description"}
      value={args.slot2}
       />

  <p.Stack
    as={"div"}
    data-plasmic-name={"box"}
    data-plasmic-override={overrides.box}
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "DescriptiveFaultCard__box__dpNo")}
    
    >
          
  <NeedSupportButton
    
    data-plasmic-name={"needSupportButton"}
    data-plasmic-override={overrides.needSupportButton}
    
    
    
    className={classNames("__wab_instance", "DescriptiveFaultCard__needSupportButton__zXWva")}
    
    />
  

  <FixedButton
    
    data-plasmic-name={"fixedButton"}
    data-plasmic-override={overrides.fixedButton}
    
    
    
    className={classNames("__wab_instance", "DescriptiveFaultCard__fixedButton__rG6E")}
    
    />
  
        </p.Stack>
  
        </div>
  
      ) as React.ReactElement | null;
    }

    
    const PlasmicDescendants = {
      root: ["root", "faultNameNumber", "box", "needSupportButton", "fixedButton"],
faultNameNumber: ["faultNameNumber"],
box: ["box", "needSupportButton", "fixedButton"],
needSupportButton: ["needSupportButton"],
fixedButton: ["fixedButton"],
    } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div";
faultNameNumber: typeof FaultNameNumber;
box: "div";
needSupportButton: typeof NeedSupportButton;
fixedButton: typeof FixedButton
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicDescriptiveFaultCard__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicDescriptiveFaultCard__VariantsArgs;
        args?: PlasmicDescriptiveFaultCard__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicDescriptiveFaultCard__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicDescriptiveFaultCard__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDescriptiveFaultCard__ArgProps,
          internalVariantPropNames: PlasmicDescriptiveFaultCard__VariantProps,
        });

        return PlasmicDescriptiveFaultCard__RenderFunc({
          variants, args, overrides, forNode: nodeName
        });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicDescriptiveFaultCard";
      } else {
        func.displayName = `PlasmicDescriptiveFaultCard.${nodeName}`;
      }
      return func;
    }

    export const PlasmicDescriptiveFaultCard = Object.assign(
      // Top-level PlasmicDescriptiveFaultCard renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        faultNameNumber: makeNodeComponent("faultNameNumber"),
box: makeNodeComponent("box"),
needSupportButton: makeNodeComponent("needSupportButton"),
fixedButton: makeNodeComponent("fixedButton"),

        // Metadata about props expected for PlasmicDescriptiveFaultCard
        internalVariantProps: PlasmicDescriptiveFaultCard__VariantProps,
        internalArgProps: PlasmicDescriptiveFaultCard__ArgProps,
      }
    );
  

    export default PlasmicDescriptiveFaultCard;
    /* prettier-ignore-end */
  