
    // @ts-nocheck
    /* eslint-disable */
    /* tslint:disable */
    /* prettier-ignore-start */
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: oAigPHm8VZgjKtAmnNEFkF
    // Component: 4CgkUm2pVd
    // plasmic-unformatted
    import * as React from "react";
    
    import * as p from  "@plasmicapp/react-web";
    import {hasVariant, classNames, wrapWithClassName, createPlasmicElementProxy, makeFragment, MultiChoiceArg, SingleBooleanChoiceArg, SingleChoiceArg, pick, omit, useTrigger, StrictProps, deriveRenderOpts, ensureGlobalVariants} from "@plasmicapp/react-web";
    import FaultNameNumber from "..//FaultNameNumber";  // plasmic-import: KcSIlmSgOq/component
    
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    import  "./plasmic_olli_support.css"; // plasmic-import: oAigPHm8VZgjKtAmnNEFkF/projectcss
    import  "./PlasmicFaultCard.css" // plasmic-import: 4CgkUm2pVd/css
  
    
    

    
    export type PlasmicFaultCard__VariantMembers = {
      highPriority: "highPriority";
mediumPriority: "mediumPriority";
lowPriority: "lowPriority";
noPriority: "noPriority";
    };
    export type PlasmicFaultCard__VariantsArgs = {
    highPriority?: SingleBooleanChoiceArg<"highPriority">
mediumPriority?: SingleBooleanChoiceArg<"mediumPriority">
lowPriority?: SingleBooleanChoiceArg<"lowPriority">
noPriority?: SingleBooleanChoiceArg<"noPriority">
  };
    type VariantPropType = keyof PlasmicFaultCard__VariantsArgs;
    export const PlasmicFaultCard__VariantProps = new Array<VariantPropType>("highPriority","mediumPriority","lowPriority","noPriority");
  

    
    export type PlasmicFaultCard__ArgsType = {
    faultNameStandard?: React.ReactNode;
faultDescriptionStandard?: React.ReactNode
  };
    type ArgPropType = keyof PlasmicFaultCard__ArgsType;
    export const PlasmicFaultCard__ArgProps = new Array<ArgPropType>("faultNameStandard","faultDescriptionStandard");
  

    export type PlasmicFaultCard__OverridesType = {
    root?: p.Flex<"div">;
box?: p.Flex<"div">;
faultNameNumber?: p.Flex<typeof FaultNameNumber>;
  };

    
    export interface DefaultFaultCardProps {
      faultNameStandard?: React.ReactNode;
faultDescriptionStandard?: React.ReactNode;
highPriority?: SingleBooleanChoiceArg<"highPriority">;
mediumPriority?: SingleBooleanChoiceArg<"mediumPriority">;
lowPriority?: SingleBooleanChoiceArg<"lowPriority">;
noPriority?: SingleBooleanChoiceArg<"noPriority">
      className?: string;
    }
  

    
    function PlasmicFaultCard__RenderFunc(
      props: {
        variants: PlasmicFaultCard__VariantsArgs,
        args: PlasmicFaultCard__ArgsType
        overrides: PlasmicFaultCard__OverridesType
        forNode?: string
      }
    ) {
      const {variants, args, overrides, forNode} = props;

      
      
      return (
        
  <p.Stack
    as={"div"}
    data-plasmic-name={"root"}
    data-plasmic-override={overrides.root}
    data-plasmic-root={true}
    data-plasmic-for-node={forNode}
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_oAigPHm8VZgjKtAmnNEFkF", "FaultCard__root__scMbG", { "FaultCard__root__highPriority__scMbGdpXl8": hasVariant(variants, "highPriority", "highPriority"), "FaultCard__root__lowPriority__scMbGYd3Tc": hasVariant(variants, "lowPriority", "lowPriority"), "FaultCard__root__mediumPriority__scMbGrsLEw": hasVariant(variants, "mediumPriority", "mediumPriority"), "FaultCard__root__noPriority__scMbG5O2S": hasVariant(variants, "noPriority", "noPriority") })}
    
    >
          
  <div
    
    data-plasmic-name={"box"}
    data-plasmic-override={overrides.box}
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "FaultCard__box__dQlZ4")}
    
    >
          
  <FaultNameNumber
    
    data-plasmic-name={"faultNameNumber"}
    data-plasmic-override={overrides.faultNameNumber}
    
    
    
    className={classNames("__wab_instance", "FaultCard__faultNameNumber__xsepw", { "FaultCard__faultNameNumber__highPriority__xsepwDpXl8": hasVariant(variants, "highPriority", "highPriority"), "FaultCard__faultNameNumber__lowPriority__xsepwYd3Tc": hasVariant(variants, "lowPriority", "lowPriority"), "FaultCard__faultNameNumber__mediumPriority__xsepwrsLEw": hasVariant(variants, "mediumPriority", "mediumPriority"), "FaultCard__faultNameNumber__noPriority__xsepw5O2S": hasVariant(variants, "noPriority", "noPriority") })}
highPriority={hasVariant(variants, "highPriority", "highPriority") ? ("highPriority" as const) : undefined}
lowPriority={hasVariant(variants, "lowPriority", "lowPriority") ? ("lowPriority" as const) : undefined}
mediumPriority={hasVariant(variants, "mediumPriority", "mediumPriority") ? ("mediumPriority" as const) : undefined}
noPriority={hasVariant(variants, "noPriority", "noPriority") ? ("noPriority" as const) : undefined}
    
    >
          <p.PlasmicSlot
      defaultContents={"Fault Name - Number"}
      value={args.faultNameStandard}
       />
        </FaultNameNumber>
  
        </div>
  
<p.PlasmicSlot
      defaultContents={"Basic fault description "}
      value={args.faultDescriptionStandard}
       />
        </p.Stack>
  
      ) as React.ReactElement | null;
    }

    
    const PlasmicDescendants = {
      root: ["root", "box", "faultNameNumber"],
box: ["box", "faultNameNumber"],
faultNameNumber: ["faultNameNumber"],
    } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div";
box: "div";
faultNameNumber: typeof FaultNameNumber
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicFaultCard__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicFaultCard__VariantsArgs;
        args?: PlasmicFaultCard__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicFaultCard__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicFaultCard__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFaultCard__ArgProps,
          internalVariantPropNames: PlasmicFaultCard__VariantProps,
        });

        return PlasmicFaultCard__RenderFunc({
          variants, args, overrides, forNode: nodeName
        });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicFaultCard";
      } else {
        func.displayName = `PlasmicFaultCard.${nodeName}`;
      }
      return func;
    }

    export const PlasmicFaultCard = Object.assign(
      // Top-level PlasmicFaultCard renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        box: makeNodeComponent("box"),
faultNameNumber: makeNodeComponent("faultNameNumber"),

        // Metadata about props expected for PlasmicFaultCard
        internalVariantProps: PlasmicFaultCard__VariantProps,
        internalArgProps: PlasmicFaultCard__ArgProps,
      }
    );
  

    export default PlasmicFaultCard;
    /* prettier-ignore-end */
  