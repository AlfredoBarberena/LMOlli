
    // @ts-nocheck
    /* eslint-disable */
    /* tslint:disable */
    /* prettier-ignore-start */
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: oAigPHm8VZgjKtAmnNEFkF
    // Component: cVmO3LFZfcn
    // plasmic-unformatted
    import * as React from "react";
    
    import * as p from  "@plasmicapp/react-web";
    import {hasVariant, classNames, wrapWithClassName, createPlasmicElementProxy, makeFragment, MultiChoiceArg, SingleBooleanChoiceArg, SingleChoiceArg, pick, omit, useTrigger, StrictProps, deriveRenderOpts, ensureGlobalVariants} from "@plasmicapp/react-web";
    import FaultCard from "..//FaultCard";  // plasmic-import: 4CgkUm2pVd/component
import Header from "..//Header";  // plasmic-import: UJRtJkfrXm/component
import HybridCard from "..//HybridCard";  // plasmic-import: SkUaGooM4T/component
import Footer from "..//Footer";  // plasmic-import: R4ziHmPkBc/component
    
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    import  "./plasmic_olli_support.css"; // plasmic-import: oAigPHm8VZgjKtAmnNEFkF/projectcss
    import  "./PlasmicHomepage.css" // plasmic-import: cVmO3LFZfcn/css
  
    
    

    
    export type PlasmicHomepage__VariantMembers = {
      hover: "hover";
    };
    export type PlasmicHomepage__VariantsArgs = {
    hover?: SingleBooleanChoiceArg<"hover">
  };
    type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
    export const PlasmicHomepage__VariantProps = new Array<VariantPropType>("hover");
  

    
    export type PlasmicHomepage__ArgsType = {};
    type ArgPropType = keyof PlasmicHomepage__ArgsType;
    export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();
  

    export type PlasmicHomepage__OverridesType = {
    root?: p.Flex<"div">;
header?: p.Flex<typeof Header>;
hybridCard?: p.Flex<typeof HybridCard>;
footer?: p.Flex<typeof Footer>;
  };

    
    export interface DefaultHomepageProps {
      hover?: SingleBooleanChoiceArg<"hover">
      className?: string;
    }
  

    
    function PlasmicHomepage__RenderFunc(
      props: {
        variants: PlasmicHomepage__VariantsArgs,
        args: PlasmicHomepage__ArgsType
        overrides: PlasmicHomepage__OverridesType
        forNode?: string
      }
    ) {
      const {variants, args, overrides, forNode} = props;

      
      
      return (
        <React.Fragment>
    
    
    
      <div className={"plasmic_page_wrapper"}>
        
  <div
    
    data-plasmic-name={"root"}
    data-plasmic-override={overrides.root}
    data-plasmic-root={true}
    data-plasmic-for-node={forNode}
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_oAigPHm8VZgjKtAmnNEFkF", "Homepage__root__nuuKh", { "Homepage__root__hover__nuuKheLfcU": hasVariant(variants, "hover", "hover") })}
    
    >
          { (hasVariant(variants, "hover", "hover") ? true : false) ? (
  <FaultCard
    
    
    
    
    
    
    className={classNames("__wab_instance", "Homepage__faultCard__ffd2J", { "Homepage__faultCard__hover__ffd2JeLfcU": hasVariant(variants, "hover", "hover") })}
    
    />
  ) : null }

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "Homepage__box__bit1O")}
    
    >
          
  <Header
    
    data-plasmic-name={"header"}
    data-plasmic-override={overrides.header}
    
    
    
    className={classNames("__wab_instance", "Homepage__header__hMcuT")}
    
    />
  
        </div>
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "Homepage__box__waaQb")}
    
    >
          
  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "Homepage__box___1A8Hk")}
    
    >
          
  <FaultCard
    
    
    
    
    
    
    className={classNames("__wab_instance", "Homepage__faultCard__lW1E")}
highPriority={("highPriority" as const)}
    
    />
  

  <FaultCard
    
    
    
    
    
    
    className={classNames("__wab_instance", "Homepage__faultCard__nok9I")}
mediumPriority={("mediumPriority" as const)}
    
    />
  

  <HybridCard
    
    data-plasmic-name={"hybridCard"}
    data-plasmic-override={overrides.hybridCard}
    
    
    
    className={classNames("__wab_instance", "Homepage__hybridCard__qm1P5")}
    
    />
  

  <FaultCard
    
    
    
    
    
    
    className={classNames("__wab_instance", "Homepage__faultCard__pQ7P")}
noPriority={("noPriority" as const)}
    
    />
  

  <FaultCard
    
    
    
    
    
    
    className={classNames("__wab_instance", "Homepage__faultCard__uegZh")}
noPriority={("noPriority" as const)}
    
    />
  

  <FaultCard
    
    
    
    
    
    
    className={classNames("__wab_instance", "Homepage__faultCard___1Bh2D")}
noPriority={("noPriority" as const)}
    
    />
  

  <FaultCard
    
    
    
    
    
    
    className={classNames("__wab_instance", "Homepage__faultCard__fdJcy")}
noPriority={("noPriority" as const)}
    
    />
  

  <FaultCard
    
    
    
    
    
    
    className={classNames("__wab_instance", "Homepage__faultCard__uKlQo")}
noPriority={("noPriority" as const)}
    
    />
  

  <FaultCard
    
    
    
    
    
    
    className={classNames("__wab_instance", "Homepage__faultCard__fUn6Z")}
noPriority={("noPriority" as const)}
    
    />
  
        </p.Stack>
  
        </div>
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "Homepage__box__oames")}
    
    >
          
  <Footer
    
    data-plasmic-name={"footer"}
    data-plasmic-override={overrides.footer}
    
    
    
    className={classNames("__wab_instance", "Homepage__footer__nVgnX")}
    
    />
  
        </div>
  
        </div>
  
      </div>
    
  </React.Fragment>
      ) as React.ReactElement | null;
    }

    
    const PlasmicDescendants = {
      root: ["root", "header", "hybridCard", "footer"],
header: ["header"],
hybridCard: ["hybridCard"],
footer: ["footer"],
    } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div";
header: typeof Header;
hybridCard: typeof HybridCard;
footer: typeof Footer
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicHomepage__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicHomepage__VariantsArgs;
        args?: PlasmicHomepage__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicHomepage__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps,
        });

        return PlasmicHomepage__RenderFunc({
          variants, args, overrides, forNode: nodeName
        });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicHomepage";
      } else {
        func.displayName = `PlasmicHomepage.${nodeName}`;
      }
      return func;
    }

    export const PlasmicHomepage = Object.assign(
      // Top-level PlasmicHomepage renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        header: makeNodeComponent("header"),
hybridCard: makeNodeComponent("hybridCard"),
footer: makeNodeComponent("footer"),

        // Metadata about props expected for PlasmicHomepage
        internalVariantProps: PlasmicHomepage__VariantProps,
        internalArgProps: PlasmicHomepage__ArgProps,
      }
    );
  

    export default PlasmicHomepage;
    /* prettier-ignore-end */
  